import telegram
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters
import random
from io import BytesIO
from PIL import Image, ImageDraw, ImageFont
import logging
import asyncio
from datetime import datetime, timedelta
import pytz, os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏)
logging.basicConfig(format='%(asctime)s - %(levelname)s - %(message)s', level=logging.ERROR)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = os.getenv('TOKEN')

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
MAIN_MENU_KEYBOARD = ReplyKeyboardMarkup(
    [[KeyboardButton("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"), KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")]],
    resize_keyboard=True
)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞
def generate_example(user_id):
    settings = user_data[user_id].get('settings', {'difficulty': 'medium', 'operations': ['+', '-', '*', '/']})
    difficulty = settings['difficulty']
    operations = settings['operations']

    op = random.choice(operations)
    if difficulty == 'easy':
        range_max = 20
    elif difficulty == 'medium':
        range_max = 100
    else:  # hard
        range_max = 500

    if op == '+':
        a, b = random.randint(1, range_max), random.randint(1, range_max)
        answer = a + b
    elif op == '-':
        a, b = random.randint(1, range_max), random.randint(1, range_max)
        a, b = max(a, b), min(a, b)
        answer = a - b
    elif op == '*':
        a, b = random.randint(1, range_max // 10), random.randint(1, range_max // 10)
        answer = a * b
    else:  # '/'
        answer = random.randint(1, range_max // 10)
        b = random.randint(1, range_max // 10)
        a = answer * b
    return f"{a} {op} {b}", answer

# –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø—Ä–∏–º–µ—Ä–æ–º
def create_example_image(example):
    img = Image.new('RGB', (300, 100), color=(255, 255, 255))
    d = ImageDraw.Draw(img)
    try:
        font = ImageFont.truetype("arial.ttf", 40)
    except:
        font = ImageFont.load_default(size=40)
    d.text((10, 30), example, font=font, fill=(0, 0, 0))
    buffer = BytesIO()
    img.save(buffer, format="PNG")
    buffer.seek(0)
    return buffer

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: telegram.Update, context: telegram.ext.ContextTypes.DEFAULT_TYPE):
    if update.message.chat.type != 'private':
        return
    user_id = update.message.from_user.id
    if user_id not in user_data:
        user_data[user_id] = {
            'correct': 0, 'total': 0, 'current_example': None, 'current_answer': None,
            'settings': {'difficulty': 'medium', 'operations': ['+', '-', '*', '/'], 'time_limit': 30},
            'last_message_time': None, 'timer_task': None
        }
    await update.message.reply_text(
        "‚ú® –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —É—Å—Ç–Ω–æ–≥–æ —Å—á–µ—Ç–∞! ‚ú®\n"
        "–ù–∞–∂–º–∏ 'üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π /menu.",
        reply_markup=MAIN_MENU_KEYBOARD
    )

# –ö–æ–º–∞–Ω–¥–∞ /menu
async def menu(update: telegram.Update, context: telegram.ext.ContextTypes.DEFAULT_TYPE):
    if update.message.chat.type != 'private':
        return
    user_id = update.message.from_user.id
    if user_id not in user_data:
        user_data[user_id] = {
            'correct': 0, 'total': 0, 'current_example': None, 'current_answer': None,
            'settings': {'difficulty': 'medium', 'operations': ['+', '-', '*', '/'], 'time_limit': 30},
            'last_message_time': None, 'timer_task': None
        }
    keyboard = [
        [InlineKeyboardButton("üèãÔ∏è –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data='start_training')],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='show_stats')]
    ]
    await update.message.reply_text("üéâ –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=InlineKeyboardMarkup(keyboard))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
async def settings_menu(update: telegram.Update, context: telegram.ext.ContextTypes.DEFAULT_TYPE):
    if update.message.chat.type != 'private':
        return
    user_id = update.message.from_user.id
    settings = user_data[user_id]['settings']
    keyboard = [
        [InlineKeyboardButton("–£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏", callback_data='set_difficulty')],
        [InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏", callback_data='set_operations')],
        [InlineKeyboardButton("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è (—Å–µ–∫)", callback_data='set_time')],
        [InlineKeyboardButton("‚Ü©Ô∏è –í –º–µ–Ω—é", callback_data='back')]
    ]
    await update.message.reply_text(
        f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
        f"–°–ª–æ–∂–Ω–æ—Å—Ç—å: {settings['difficulty']}\n"
        f"–û–ø–µ—Ä–∞—Ü–∏–∏: {', '.join(settings['operations'])}\n"
        f"–í—Ä–µ–º—è: {settings['time_limit']} —Å–µ–∫",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# –¢–∞–π–º–µ—Ä
async def time_out(user_id, context):
    try:
        await asyncio.sleep(user_data[user_id]['settings']['time_limit'])
        if user_data[user_id]['current_answer'] is not None:
            user_data[user_id]['total'] += 1
            user_data[user_id]['current_example'] = None
            user_data[user_id]['current_answer'] = None
            await context.bot.send_message(
                user_id,
                "‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ! –ü–æ–ø—Ä–æ–±—É–π –Ω–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚û°Ô∏è –ù–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä", callback_data='start_training')]])
            )
    except asyncio.CancelledError:
        pass

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é –æ–ø–µ—Ä–∞—Ü–∏–π (–Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
async def update_operations_menu(query, user_id):
    operations = user_data[user_id]['settings']['operations']
    keyboard = [
        [InlineKeyboardButton(f"{'‚úÖ' if '+' in operations else '‚ùå'} –°–ª–æ–∂–µ–Ω–∏–µ", callback_data='toggle_+'),
         InlineKeyboardButton(f"{'‚úÖ' if '-' in operations else '‚ùå'} –í—ã—á–∏—Ç–∞–Ω–∏–µ", callback_data='toggle_-')],
        [InlineKeyboardButton(f"{'‚úÖ' if '*' in operations else '‚ùå'} –£–º–Ω–æ–∂–µ–Ω–∏–µ", callback_data='toggle_*'),
         InlineKeyboardButton(f"{'‚úÖ' if '/' in operations else '‚ùå'} –î–µ–ª–µ–Ω–∏–µ", callback_data='toggle_/')],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='settings')]
    ]
    await query.edit_message_text("–í—ã–±–µ—Ä–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏:", reply_markup=InlineKeyboardMarkup(keyboard))

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def button(update: telegram.Update, context: telegram.ext.ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()

    if query.data == 'start_training':
        if user_data[user_id].get('timer_task'):
            user_data[user_id]['timer_task'].cancel()
        example, answer = generate_example(user_id)
        user_data[user_id]['current_example'] = example
        user_data[user_id]['current_answer'] = answer
        user_data[user_id]['last_message_time'] = datetime.now(pytz.UTC)

        img_buffer = create_example_image(example + " = ?")
        await query.message.reply_photo(
            photo=img_buffer,
            caption=f"üß† –†–µ—à–∏ –∑–∞ {user_data[user_id]['settings']['time_limit']} —Å–µ–∫:",
            reply_markup=MAIN_MENU_KEYBOARD
        )
        await query.edit_message_text("‚úÖ –ü—Ä–∏–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        user_data[user_id]['timer_task'] = asyncio.create_task(time_out(user_id, context))

    elif query.data == 'show_stats':
        stats = user_data.get(user_id, {'correct': 0, 'total': 0})
        percent = (stats['correct'] / stats['total'] * 100) if stats['total'] > 0 else 0
        await query.edit_message_text(
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ: {stats['correct']}\nüìö –í—Å–µ–≥–æ: {stats['total']}\nüåü –£—Å–ø–µ—Ö: {percent:.1f}%",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚Ü©Ô∏è –í –º–µ–Ω—é", callback_data='back')]])
        )

    elif query.data == 'back':
        keyboard = [
            [InlineKeyboardButton("üèãÔ∏è –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data='start_training')],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='show_stats')]
        ]
        await query.edit_message_text("üéâ –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=InlineKeyboardMarkup(keyboard))

    elif query.data == 'set_difficulty':
        keyboard = [
            [InlineKeyboardButton("–õ–µ–≥–∫–æ", callback_data='diff_easy'),
             InlineKeyboardButton("–°—Ä–µ–¥–Ω–µ", callback_data='diff_medium'),
             InlineKeyboardButton("–°–ª–æ–∂–Ω–æ", callback_data='diff_hard')],
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='settings')]
        ]
        await query.edit_message_text("–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:", reply_markup=InlineKeyboardMarkup(keyboard))

    elif query.data.startswith('diff_'):
        difficulty = query.data.split('_')[1]
        user_data[user_id]['settings']['difficulty'] = difficulty
        await query.edit_message_text(f"–°–ª–æ–∂–Ω–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {difficulty}",
                                      reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='settings')]]))

    elif query.data == 'set_operations':
        await update_operations_menu(query, user_id)

    elif query.data.startswith('toggle_'):
        op = query.data.split('_')[1]
        operations = user_data[user_id]['settings']['operations']
        if op in operations:
            if len(operations) > 1:  # –ù–µ–ª—å–∑—è —É–±—Ä–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –æ–ø–µ—Ä–∞—Ü–∏—é
                operations.remove(op)
        else:
            operations.append(op)
        await update_operations_menu(query, user_id)

    elif query.data == 'set_time':
        await query.edit_message_text("–í–≤–µ–¥–∏ –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (10-60):",
                                      reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='settings')]]))
        user_data[user_id]['awaiting_time'] = True

    elif query.data == 'settings':
        settings = user_data[user_id]['settings']
        keyboard = [
            [InlineKeyboardButton("–£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏", callback_data='set_difficulty')],
            [InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏", callback_data='set_operations')],
            [InlineKeyboardButton("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è (—Å–µ–∫)", callback_data='set_time')],
            [InlineKeyboardButton("‚Ü©Ô∏è –í –º–µ–Ω—é", callback_data='back')]
        ]
        await query.edit_message_text(
            f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
            f"–°–ª–æ–∂–Ω–æ—Å—Ç—å: {settings['difficulty']}\n"
            f"–û–ø–µ—Ä–∞—Ü–∏–∏: {', '.join(settings['operations'])}\n"
            f"–í—Ä–µ–º—è: {settings['time_limit']} —Å–µ–∫",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def check_answer(update: telegram.Update, context: telegram.ext.ContextTypes.DEFAULT_TYPE):
    if update.message.chat.type != 'private':
        return
    user_id = update.message.from_user.id
    message_time = update.message.date.replace(tzinfo=pytz.UTC)

    if user_data[user_id].get('last_message_time') and (message_time < user_data[user_id]['last_message_time'] - timedelta(minutes=1)):
        return

    message_text = update.message.text
    if message_text == "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await menu(update, context)
        return
    elif message_text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        await settings_menu(update, context)
        return

    if 'awaiting_time' in user_data[user_id] and user_data[user_id]['awaiting_time']:
        try:
            time_limit = int(message_text)
            if 10 <= time_limit <= 60:
                user_data[user_id]['settings']['time_limit'] = time_limit
                await update.message.reply_text(f"–í—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {time_limit} —Å–µ–∫", reply_markup=MAIN_MENU_KEYBOARD)
            else:
                await update.message.reply_text("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç 10 –¥–æ 60!", reply_markup=MAIN_MENU_KEYBOARD)
        except ValueError:
            await update.message.reply_text("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ!", reply_markup=MAIN_MENU_KEYBOARD)
        user_data[user_id]['awaiting_time'] = False
        return

    if user_data[user_id]['current_answer'] is None:
        return

    try:
        user_answer = int(message_text)
        correct_answer = user_data[user_id]['current_answer']
        if user_data[user_id]['timer_task']:
            user_data[user_id]['timer_task'].cancel()
        user_data[user_id]['total'] += 1
        if user_answer == correct_answer:
            user_data[user_id]['correct'] += 1
            response = "üéâ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!"
        else:
            response = f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}"
        user_data[user_id]['current_example'] = None
        user_data[user_id]['current_answer'] = None

        keyboard = [
            [InlineKeyboardButton("‚û°Ô∏è –ù–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä", callback_data='start_training')],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='show_stats')]
        ]
        await update.message.reply_text(response, reply_markup=InlineKeyboardMarkup(keyboard))

    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏ —á–∏—Å–ª–æ!", reply_markup=MAIN_MENU_KEYBOARD)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
async def error_handler(update: telegram.Update, context: telegram.ext.ContextTypes.DEFAULT_TYPE):
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}")
    if update and update.message and update.message.chat.type == 'private':
        await update.message.reply_text("üòî –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π /menu.", reply_markup=MAIN_MENU_KEYBOARD)

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    application = Application.builder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("menu", menu))
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex(r'^üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é$'), menu))
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex(r'^‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏$'), settings_menu))
    application.add_handler(CallbackQueryHandler(button))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, check_answer))
    application.add_error_handler(error_handler)
    application.run_polling(poll_interval=0.5)

if __name__ == '__main__':
    main()